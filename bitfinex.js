// Generated by CoffeeScript 1.12.4
(function() {
  var Bitfinex, crypto, request, verror;

  process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";

  request = require('request');

  crypto = require('crypto');

  verror = require('verror');

  module.exports = Bitfinex = (function() {
    function Bitfinex(key, secret, timeout) {
      this.url = "https://api.bitfinex.com";
      this.key = key;
      this.secret = secret;
      this.nonce = Math.round((new Date()).getTime() / 1000);
      this.timeout = timeout || 20000;
    }

    Bitfinex.prototype._nonce = function() {
      return this.nonce++;
    };

    Bitfinex.prototype.make_request = function(sub_path, params, cb) {
      var base64Payload, headers, key, nonce, path, payload, signature, url, value;
      if (!this.key || !this.secret) {
        return cb(new Error("missing api key or secret"));
      }
      path = '/v1/' + sub_path;
      url = this.url + path;
      nonce = JSON.stringify(this._nonce());
      payload = {
        request: path,
        nonce: nonce
      };
      for (key in params) {
        value = params[key];
        payload[key] = value;
      }
      base64Payload = new Buffer(JSON.stringify(payload)).toString('base64');
      signature = crypto.createHmac("sha384", this.secret).update(base64Payload).digest('hex');
      headers = {
        'X-BFX-APIKEY': this.key,
        'X-BFX-PAYLOAD': base64Payload,
        'X-BFX-SIGNATURE': signature
      };
      return request({
        url: url,
        method: "POST",
        headers: headers,
        timeout: this.timeout
      }, function(err, response, body) {
        var error, result;
        if (err) {
          error = new verror(err, 'failed post request to url %s with payload %s.', url, JSON.stringify(payload));
          error.name = err.code;
          return cb(error);
        }
        try {
          result = JSON.parse(body);
        } catch (error1) {
          err = error1;
          error = new verror('failed post request to url %s with payload %s. HTTP status code: %s.', url, JSON.stringify(payload), response.statusCode);
          error.name = response.statusCode;
          return cb(error);
        }
        if (result.message) {
          error = new verror('failed post request to url %s with payload %s. Message: %s', url, payload, result.message);
          error.name = result.message;
          return cb(error);
        }
        return cb(null, result);
      });
    };

    Bitfinex.prototype.make_public_request = function(path, params, cb) {
      var url;
      url = this.url + '/v1/' + path;
      return request({
        url: url,
        method: "GET",
        timeout: this.timeout,
        qs: params
      }, function(err, response, body) {
        var error, result;
        if (err) {
          error = new verror(err, 'failed post request to url %s', url);
          error.name = err.code;
          return cb(error);
        } else if (response.statusCode !== 200 && response.statusCode !== 400) {
          error = new verror('failed post request to url %s with params %s. Response status code: %s', url, JSON.stringify(params), response.statusCode);
          error.name = response.statusCode;
          return cb(error);
        }
        try {
          result = JSON.parse(body);
        } catch (error1) {
          err = error1;
          error = new verror(err, 'failed to parse response body from url %s with params %s. Body: %s', url, JSON.stringify(params), body.toString());
          error.name = err.message;
          return cb(error);
        }
        if (result.message != null) {
          error = new verror('failed post request to url %s. Message: %s', url, result.message);
          error.name = result.message;
          return cb(error);
        }
        return cb(null, result);
      });
    };

    Bitfinex.prototype.ticker = function(symbol, cb) {
      return this.make_public_request('pubticker/' + symbol, {}, cb);
    };

    Bitfinex.prototype.today = function(symbol, cb) {
      return this.make_public_request('today/' + symbol, {}, cb);
    };

    Bitfinex.prototype.candles = function(symbol, cb) {
      return this.make_public_request('candles/' + symbol, {}, cb);
    };

    Bitfinex.prototype.lendbook = function(currency, cb) {
      return this.make_public_request('lendbook/' + currency, {}, cb);
    };

    Bitfinex.prototype.orderbook = function(symbol, cb) {
      var maxOrders, uri;
      maxOrders = 100;
      uri = 'book/' + symbol;
      return this.make_public_request(uri, {
        limit_bids: maxOrders,
        limit_asks: maxOrders
      }, cb);
    };

    Bitfinex.prototype.trades = function(symbol, params, cb) {
      if (!params) {
        params = {};
      }
      return this.make_public_request('trades/' + symbol, params, cb);
    };

    Bitfinex.prototype.lends = function(currency, cb) {
      return this.make_public_request('lends/' + currency, {}, cb);
    };

    Bitfinex.prototype.get_symbols = function(cb) {
      return this.make_public_request('symbols/', {}, cb);
    };

    Bitfinex.prototype.new_order = function(symbol, amount, price, exchange, side, type, cb) {
      var params;
      params = {
        symbol: symbol,
        amount: amount,
        price: price,
        exchange: exchange,
        side: side,
        type: type
      };
      return this.make_request('order/new', params, cb);
    };

    Bitfinex.prototype.multiple_new_orders = function(symbol, amount, price, exchange, side, type, cb) {
      var params;
      params = {
        symbol: symbol,
        amount: amount,
        price: price,
        exchange: exchange,
        side: side,
        type: type
      };
      return this.make_request('order/new/multi', params, cb);
    };

    Bitfinex.prototype.cancel_order = function(order_id, cb) {
      var params;
      params = {
        order_id: parseInt(order_id)
      };
      return this.make_request('order/cancel', params, cb);
    };

    Bitfinex.prototype.cancel_all_orders = function(cb) {
      return this.make_request('order/cancel/all', {}, cb);
    };

    Bitfinex.prototype.cancel_multiple_orders = function(order_ids, cb) {
      var params;
      params = {
        order_ids: order_ids.map(function(id) {
          return parseInt(id);
        })
      };
      return this.make_request('order/cancel/multi', params, cb);
    };

    Bitfinex.prototype.replace_order = function(order_id, symbol, amount, price, exchange, side, type, cb) {
      var params;
      params = {
        order_id: parseInt(order_id),
        symbol: symbol,
        amount: amount,
        price: price,
        exchange: exchange,
        side: side,
        type: type
      };
      return this.make_request('order/cancel/replace', params, cb);
    };

    Bitfinex.prototype.order_status = function(order_id, cb) {
      var params;
      params = {
        order_id: parseInt(order_id)
      };
      return this.make_request('order/status', params, cb);
    };

    Bitfinex.prototype.active_orders = function(cb) {
      return this.make_request('orders', {}, cb);
    };

    Bitfinex.prototype.active_positions = function(cb) {
      return this.make_request('positions', {}, cb);
    };

    Bitfinex.prototype.past_trades = function(symbol, fromDate, toDate, limit_trades, cb) {
      var params;
      params = {
        symbol: symbol,
        timestamp: fromDate,
        until: toDate,
        limit_trades: limit_trades
      };
      return this.make_request('mytrades', params, cb);
    };

    Bitfinex.prototype.history = function(currency, fromDate, toDate, limit, wallet, cb) {
      var params;
      params = {
        currency: currency,
        since: fromDate,
        until: toDate,
        limit: limit,
        wallet: wallet
      };
      return this.make_request('history', params, cb);
    };

    Bitfinex.prototype.movements = function(currency, fromDate, toDate, limit, cb) {
      var params;
      params = {
        currency: currency,
        since: fromDate,
        until: toDate,
        limit: limit
      };
      return this.make_request('history/movements', params, cb);
    };

    Bitfinex.prototype.new_offer = function(currency, amount, rate, period, direction, insurance_option, cb) {
      var params;
      params = {
        currency: currency,
        amount: amount,
        rate: rate,
        period: period,
        direction: direction,
        insurance_option: insurance_option
      };
      return this.make_request('offer/new', params, cb);
    };

    Bitfinex.prototype.cancel_offer = function(offer_id, cb) {
      var params;
      params = {
        offer_id: parseInt(offer_id)
      };
      return this.make_request('offer/cancel', params, cb);
    };

    Bitfinex.prototype.offer_status = function(offer_id, cb) {
      var params;
      params = {
        offer_id: parseInt(offer_id)
      };
      return this.make_request('offer/status', params, cb);
    };

    Bitfinex.prototype.active_offers = function(cb) {
      return this.make_request('offers', {}, cb);
    };

    Bitfinex.prototype.active_credits = function(cb) {
      return this.make_request('credits', {}, cb);
    };

    Bitfinex.prototype.wallet_balances = function(cb) {
      return this.make_request('balances', {}, cb);
    };

    return Bitfinex;

  })();

}).call(this);
